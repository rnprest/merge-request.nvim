================================================================================
                                                                 *merge-request*

M.setup({opts})                                            *merge-request.setup*
     Loads the user's specified configuration and creates their desired keymapping

    Parameters: ~
        {opts}  (table)  User-provided options, to override the default options with


M.create()                                                *merge-request.create*
     Prompts the user for a Title for their merge request. If none is provided, then "Draft: <Need to name this MR>" is used
     After the title is provided, the description window will be created


M.submit()                                                *merge-request.submit*
     Executes the git push command, and consequently opens the newly-created merge request in the user's browser (if enabled)


================================================================================
                                                          *merge-request.config*

M.add_push_options({command})            *merge-request.config.add_push_options*
     Adds any push options that the user has enabled in their config

    Parameters: ~
        {command}  (table)  The current cli arguments to push with

    Returns: ~
        (table)  updated table of arguments, that now includes the user's desired push options


================================================================================
                                                           *merge-request.utils*

M.get_branch_name()                        *merge-request.utils.get_branch_name*
     Get's the current branch name, even if it hasn't been pushed yet

    Returns: ~
        (string)  branch name


M.open_url({url})                                 *merge-request.utils.open_url*
     Opens the given url in the user's browser

    Parameters: ~
        {url}  (string)  The url to open


M.prompt({arg})                                     *merge-request.utils.prompt*
     Prompts the user for input

    Parameters: ~
        {arg}  (string)  The title of the prompt to provide to the user

    Returns: ~
        (string)  user's input


                                                  *merge-request.utils.get_args*
M.get_args({branch}, {title}, {description})
     Creates the required arguments for a merge request

    Parameters: ~
        {branch}       (string)  The current branch name
        {title}        (string)  The merge request title
        {description}  (string)  The merge request description

    Returns: ~
        (table)  required arguments for the user's desired merge request to be created


================================================================================
                                                              *merge-request.ui*

M.close()                                               *merge-request.ui.close*
     Closes the floating window used to provide the description


M.on_save()                                           *merge-request.ui.on_save*
     Submits the merge request with the description provided in the floating window


M.create_window({title})                        *merge-request.ui.create_window*
     Creates a floating window to input the description into

    Parameters: ~
        {title}  (string)  The title to display at the top of the floating window


vim:tw=78:ts=8:noet:ft=help:norl:
